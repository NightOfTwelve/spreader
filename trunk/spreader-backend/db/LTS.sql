USE spreader;

DROP TABLE IF EXISTS QRTZ_JOB_LISTENERS;
DROP TABLE IF EXISTS QRTZ_TRIGGER_LISTENERS;
DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

CREATE TABLE QRTZ_JOB_DETAILS(
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	DESCRIPTION VARCHAR(250) NULL,
	JOB_CLASS_NAME VARCHAR(250) NOT NULL,
	IS_DURABLE VARCHAR(1) NOT NULL,
	IS_VOLATILE VARCHAR(1) NOT NULL,
	IS_STATEFUL VARCHAR(1) NOT NULL,
	REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
	JOB_DATA BLOB NULL,
	PRIMARY KEY (JOB_NAME,JOB_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_JOB_LISTENERS (
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	JOB_LISTENER VARCHAR(200) NOT NULL,
	PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
	INDEX (JOB_NAME, JOB_GROUP),
	FOREIGN KEY (JOB_NAME,JOB_GROUP)
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	JOB_NAME VARCHAR(200) NOT NULL,
	JOB_GROUP VARCHAR(200) NOT NULL,
	IS_VOLATILE VARCHAR(1) NOT NULL,
	DESCRIPTION VARCHAR(250) NULL,
	NEXT_FIRE_TIME BIGINT(13) NULL,
	PREV_FIRE_TIME BIGINT(13) NULL,
	PRIORITY INTEGER NULL,
	TRIGGER_STATE VARCHAR(16) NOT NULL,
	TRIGGER_TYPE VARCHAR(8) NOT NULL,
	START_TIME BIGINT(13) NOT NULL,
	END_TIME BIGINT(13) NULL,
	CALENDAR_NAME VARCHAR(200) NULL,
	MISFIRE_INSTR SMALLINT(2) NULL,
	JOB_DATA BLOB NULL,
	PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
	INDEX (JOB_NAME, JOB_GROUP),
	FOREIGN KEY (JOB_NAME,JOB_GROUP)
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	REPEAT_COUNT BIGINT(7) NOT NULL,
	REPEAT_INTERVAL BIGINT(12) NOT NULL,
	TIMES_TRIGGERED BIGINT(7) NOT NULL,
	PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
	INDEX (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_CRON_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	CRON_EXPRESSION VARCHAR(120) NOT NULL,
	TIME_ZONE_ID VARCHAR(80),
	PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
	INDEX (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_BLOB_TRIGGERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	BLOB_DATA BLOB NULL,
	PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
	INDEX (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_TRIGGER_LISTENERS (
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	TRIGGER_LISTENER VARCHAR(200) NOT NULL,
	PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
	INDEX (TRIGGER_NAME, TRIGGER_GROUP),
	FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_CALENDARS (
	CALENDAR_NAME VARCHAR(200) NOT NULL,
	CALENDAR BLOB NOT NULL,
	PRIMARY KEY (CALENDAR_NAME)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	PRIMARY KEY (TRIGGER_GROUP)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_FIRED_TRIGGERS (
	ENTRY_ID VARCHAR(95) NOT NULL,
	TRIGGER_NAME VARCHAR(200) NOT NULL,
	TRIGGER_GROUP VARCHAR(200) NOT NULL,
	IS_VOLATILE VARCHAR(1) NOT NULL,
	INSTANCE_NAME VARCHAR(200) NOT NULL,
	FIRED_TIME BIGINT(13) NOT NULL,
	PRIORITY INTEGER NOT NULL,
	STATE VARCHAR(16) NOT NULL,
	JOB_NAME VARCHAR(200) NULL,
	JOB_GROUP VARCHAR(200) NULL,
	IS_STATEFUL VARCHAR(1) NULL,
	REQUESTS_RECOVERY VARCHAR(1) NULL,
	PRIMARY KEY (ENTRY_ID)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_SCHEDULER_STATE (
	INSTANCE_NAME VARCHAR(200) NOT NULL,
	LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
	CHECKIN_INTERVAL BIGINT(13) NOT NULL,
	PRIMARY KEY (INSTANCE_NAME)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_LOCKS (
	LOCK_NAME VARCHAR(40) NOT NULL,
	PRIMARY KEY (LOCK_NAME)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO QRTZ_LOCKS values('TRIGGER_ACCESS');
INSERT INTO QRTZ_LOCKS values('JOB_ACCESS');
INSERT INTO QRTZ_LOCKS values('CALENDAR_ACCESS');
INSERT INTO QRTZ_LOCKS values('STATE_ACCESS');
INSERT INTO QRTZ_LOCKS values('MISFIRE_ACCESS');

drop table IF EXISTS LTS_TRIGGER_EXECUTION_MSG;
drop table IF EXISTS LTS_TRIGGER_EXECUTION_RECORD;
drop table IF EXISTS LTS_AGENT_EXECUTION_MSG;

--create table LTS_TRIGGER_EXECUTION_MSG
create table LTS_TRIGGER_EXECUTION_MSG
(
  MSG_ID               BIGINT(27) not null auto_increment ,
  INFO_MSG             TEXT,
  DEBUG_MSG            TEXT,
  ERROR_MSG            TEXT,
  CURRENT_JOB_DATA_MSG TEXT,
  FIRED_TIME           BIGINT(13),
  TRIGGER_NAME         VARCHAR(120),
  TRIGGER_GROUP        VARCHAR(120),
  EXECUTION_STATUS     SMALLINT(2),
  COMPLETED_TIME       BIGINT(13),
  EXECUTION_DURATION   BIGINT(12),
  PRIMARY KEY (MSG_ID)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE INDEX idx_fTime ON LTS_TRIGGER_EXECUTION_MSG ( FIRED_TIME );

--create table LTS_TRIGGER_EXECUTION_RECORD
create table LTS_TRIGGER_EXECUTION_RECORD
(
  RECORD_ID            BIGINT(27) not null auto_increment,
  TRIGGER_NAME         VARCHAR(120),
  TRIGGER_GROUP        VARCHAR(120),
  MISFIRE_INSTR        SMALLINT(2),
  CRON_EXPRESSION      VARCHAR(120),
  TIME_ZONE_ID         VARCHAR(120),
  IS_VOLATILE          SMALLINT(1),
  START_TIME           BIGINT(13),
  END_TIME             BIGINT(13),
  REPEAT_COUNT         int(7),
  REPEAT_INTERVAL      BIGINT(12),
  TIMES_FIRED          int(7),
  TRIGGER_TYPE         SMALLINT(2),
  LAST_FIRED_TIME      BIGINT(13),
  LAST_SUCCESSFUL_TIME BIGINT(13),
  INSTANCE_NAME        VARCHAR(120),
  FIRED_TIME           BIGINT(13),
  PRIORITY             SMALLINT(2),
  STATE                SMALLINT(2),
  JOB_NAME             VARCHAR(120),
  JOB_GROUP            VARCHAR(120),
  JOB_CLASS_NAME       VARCHAR(120),
  IS_STATEFUL          SMALLINT(1),
  COULD_BE_RECOVERED   SMALLINT(1),
  EXECUTION_MSG_ID     BIGINT(27) not null,
  CURRENT_JOB_DATA     BLOB,
  RETRY_COUNT          int(7),
  RETRY_STATUS         SMALLINT(2),
  PRIMARY KEY (RECORD_ID)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;

CREATE INDEX idx_fTime ON LTS_TRIGGER_EXECUTION_RECORD ( FIRED_TIME );

create table LTS_AGENT_EXECUTION_MSG
(
  EXECUTION_ID       BIGINT(27) not null auto_increment,
  HOST_ID            VARCHAR(60),
  CONTROL_SESSION_ID VARCHAR(120),
  TASK_EXECUTION_ID  BIGINT(27),
  GROUP_ID           VARCHAR(30),
  CLASS_NAME         VARCHAR(240),
  METHOD_NAME        VARCHAR(60),
  BUSINESS_PARAMS    TEXT,
  PRIMARY KEY (EXECUTION_ID)
)
TYPE=InnoDB DEFAULT CHARSET=utf8;