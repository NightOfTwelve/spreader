package com.nali.spreader.data;

import com.nali.common.model.Limit;
import com.nali.common.model.Shard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RealManExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    private Shard shard;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    private Limit limit;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public RealManExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    protected RealManExample(RealManExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limit = example.limit;
        this.shard = example.shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public void setShard(Shard shard) {
        this.shard = shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public void setLimit(Limit limit) {
        this.limit = limit;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_real_man
     *
     * @ibatorgenerated Thu Aug 16 11:39:58 CST 2012
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andRealIdIsNull() {
            addCriterion("real_id is null");
            return this;
        }

        public Criteria andRealIdIsNotNull() {
            addCriterion("real_id is not null");
            return this;
        }

        public Criteria andRealIdEqualTo(String value) {
            addCriterion("real_id =", value, "realId");
            return this;
        }

        public Criteria andRealIdNotEqualTo(String value) {
            addCriterion("real_id <>", value, "realId");
            return this;
        }

        public Criteria andRealIdGreaterThan(String value) {
            addCriterion("real_id >", value, "realId");
            return this;
        }

        public Criteria andRealIdGreaterThanOrEqualTo(String value) {
            addCriterion("real_id >=", value, "realId");
            return this;
        }

        public Criteria andRealIdLessThan(String value) {
            addCriterion("real_id <", value, "realId");
            return this;
        }

        public Criteria andRealIdLessThanOrEqualTo(String value) {
            addCriterion("real_id <=", value, "realId");
            return this;
        }

        public Criteria andRealIdLike(String value) {
            addCriterion("real_id like", value, "realId");
            return this;
        }

        public Criteria andRealIdNotLike(String value) {
            addCriterion("real_id not like", value, "realId");
            return this;
        }

        public Criteria andRealIdIn(List<String> values) {
            addCriterion("real_id in", values, "realId");
            return this;
        }

        public Criteria andRealIdNotIn(List<String> values) {
            addCriterion("real_id not in", values, "realId");
            return this;
        }

        public Criteria andRealIdBetween(String value1, String value2) {
            addCriterion("real_id between", value1, value2, "realId");
            return this;
        }

        public Criteria andRealIdNotBetween(String value1, String value2) {
            addCriterion("real_id not between", value1, value2, "realId");
            return this;
        }

        public Criteria andRealNameIsNull() {
            addCriterion("real_name is null");
            return this;
        }

        public Criteria andRealNameIsNotNull() {
            addCriterion("real_name is not null");
            return this;
        }

        public Criteria andRealNameEqualTo(String value) {
            addCriterion("real_name =", value, "realName");
            return this;
        }

        public Criteria andRealNameNotEqualTo(String value) {
            addCriterion("real_name <>", value, "realName");
            return this;
        }

        public Criteria andRealNameGreaterThan(String value) {
            addCriterion("real_name >", value, "realName");
            return this;
        }

        public Criteria andRealNameGreaterThanOrEqualTo(String value) {
            addCriterion("real_name >=", value, "realName");
            return this;
        }

        public Criteria andRealNameLessThan(String value) {
            addCriterion("real_name <", value, "realName");
            return this;
        }

        public Criteria andRealNameLessThanOrEqualTo(String value) {
            addCriterion("real_name <=", value, "realName");
            return this;
        }

        public Criteria andRealNameLike(String value) {
            addCriterion("real_name like", value, "realName");
            return this;
        }

        public Criteria andRealNameNotLike(String value) {
            addCriterion("real_name not like", value, "realName");
            return this;
        }

        public Criteria andRealNameIn(List<String> values) {
            addCriterion("real_name in", values, "realName");
            return this;
        }

        public Criteria andRealNameNotIn(List<String> values) {
            addCriterion("real_name not in", values, "realName");
            return this;
        }

        public Criteria andRealNameBetween(String value1, String value2) {
            addCriterion("real_name between", value1, value2, "realName");
            return this;
        }

        public Criteria andRealNameNotBetween(String value1, String value2) {
            addCriterion("real_name not between", value1, value2, "realName");
            return this;
        }

        public Criteria andIsRealIsNull() {
            addCriterion("is_real is null");
            return this;
        }

        public Criteria andIsRealIsNotNull() {
            addCriterion("is_real is not null");
            return this;
        }

        public Criteria andIsRealEqualTo(Boolean value) {
            addCriterion("is_real =", value, "isReal");
            return this;
        }

        public Criteria andIsRealNotEqualTo(Boolean value) {
            addCriterion("is_real <>", value, "isReal");
            return this;
        }

        public Criteria andIsRealGreaterThan(Boolean value) {
            addCriterion("is_real >", value, "isReal");
            return this;
        }

        public Criteria andIsRealGreaterThanOrEqualTo(Boolean value) {
            addCriterion("is_real >=", value, "isReal");
            return this;
        }

        public Criteria andIsRealLessThan(Boolean value) {
            addCriterion("is_real <", value, "isReal");
            return this;
        }

        public Criteria andIsRealLessThanOrEqualTo(Boolean value) {
            addCriterion("is_real <=", value, "isReal");
            return this;
        }

        public Criteria andIsRealIn(List<Boolean> values) {
            addCriterion("is_real in", values, "isReal");
            return this;
        }

        public Criteria andIsRealNotIn(List<Boolean> values) {
            addCriterion("is_real not in", values, "isReal");
            return this;
        }

        public Criteria andIsRealBetween(Boolean value1, Boolean value2) {
            addCriterion("is_real between", value1, value2, "isReal");
            return this;
        }

        public Criteria andIsRealNotBetween(Boolean value1, Boolean value2) {
            addCriterion("is_real not between", value1, value2, "isReal");
            return this;
        }

        public Criteria andIsForbidBySinaIsNull() {
            addCriterion("is_forbid_by_sina is null");
            return this;
        }

        public Criteria andIsForbidBySinaIsNotNull() {
            addCriterion("is_forbid_by_sina is not null");
            return this;
        }

        public Criteria andIsForbidBySinaEqualTo(Boolean value) {
            addCriterion("is_forbid_by_sina =", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaNotEqualTo(Boolean value) {
            addCriterion("is_forbid_by_sina <>", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaGreaterThan(Boolean value) {
            addCriterion("is_forbid_by_sina >", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaGreaterThanOrEqualTo(Boolean value) {
            addCriterion("is_forbid_by_sina >=", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaLessThan(Boolean value) {
            addCriterion("is_forbid_by_sina <", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaLessThanOrEqualTo(Boolean value) {
            addCriterion("is_forbid_by_sina <=", value, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaIn(List<Boolean> values) {
            addCriterion("is_forbid_by_sina in", values, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaNotIn(List<Boolean> values) {
            addCriterion("is_forbid_by_sina not in", values, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaBetween(Boolean value1, Boolean value2) {
            addCriterion("is_forbid_by_sina between", value1, value2, "isForbidBySina");
            return this;
        }

        public Criteria andIsForbidBySinaNotBetween(Boolean value1, Boolean value2) {
            addCriterion("is_forbid_by_sina not between", value1, value2, "isForbidBySina");
            return this;
        }

        public Criteria andSinaUseCountIsNull() {
            addCriterion("sina_use_count is null");
            return this;
        }

        public Criteria andSinaUseCountIsNotNull() {
            addCriterion("sina_use_count is not null");
            return this;
        }

        public Criteria andSinaUseCountEqualTo(Integer value) {
            addCriterion("sina_use_count =", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountNotEqualTo(Integer value) {
            addCriterion("sina_use_count <>", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountGreaterThan(Integer value) {
            addCriterion("sina_use_count >", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("sina_use_count >=", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountLessThan(Integer value) {
            addCriterion("sina_use_count <", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountLessThanOrEqualTo(Integer value) {
            addCriterion("sina_use_count <=", value, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountIn(List<Integer> values) {
            addCriterion("sina_use_count in", values, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountNotIn(List<Integer> values) {
            addCriterion("sina_use_count not in", values, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountBetween(Integer value1, Integer value2) {
            addCriterion("sina_use_count between", value1, value2, "sinaUseCount");
            return this;
        }

        public Criteria andSinaUseCountNotBetween(Integer value1, Integer value2) {
            addCriterion("sina_use_count not between", value1, value2, "sinaUseCount");
            return this;
        }
    }
}