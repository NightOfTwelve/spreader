package com.nali.spreader.dao.impl;

import com.nali.spreader.dao.ICrudPhotoDao;
import com.nali.spreader.data.Photo;
import com.nali.spreader.data.PhotoExample;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.ibatis.SqlMapClientTemplate;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.springframework.stereotype.Repository;

@Repository
public class CrudPhotoDao implements ICrudPhotoDao {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Tue Nov 29 11:08:15 CST 2011
     */
    public CrudPhotoDao() {
        super();
    }

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    @Autowired
    private SqlMapClientTemplate sqlMap;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int countByExample(PhotoExample example) {
        Integer count = (Integer) getSqlMapClientTemplate().queryForObject("spreader_tb_photo.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int deleteByExample(PhotoExample example) {
        int rows = getSqlMapClientTemplate().delete("spreader_tb_photo.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int deleteByPrimaryKey(Long id) {
        Photo key = new Photo();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("spreader_tb_photo.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public void insert(Photo record) {
        getSqlMapClientTemplate().insert("spreader_tb_photo.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public void insertSelective(Photo record) {
        getSqlMapClientTemplate().insert("spreader_tb_photo.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    @SuppressWarnings("unchecked")
    public List<Photo> selectByExampleWithBLOBs(PhotoExample example) {
        List<Photo> list = getSqlMapClientTemplate().queryForList("spreader_tb_photo.ibatorgenerated_selectByExampleWithBLOBs", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    @SuppressWarnings("unchecked")
    public List<Photo> selectByExampleWithoutBLOBs(PhotoExample example) {
        List<Photo> list = getSqlMapClientTemplate().queryForList("spreader_tb_photo.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public Photo selectByPrimaryKey(Long id) {
        Photo key = new Photo();
        key.setId(id);
        Photo record = (Photo) getSqlMapClientTemplate().queryForObject("spreader_tb_photo.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByExampleSelective(Photo record, PhotoExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByExampleWithBLOBs(Photo record, PhotoExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByExampleWithBLOBs", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByExampleWithoutBLOBs(Photo record, PhotoExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByPrimaryKeySelective(Photo record) {
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByPrimaryKeyWithBLOBs(Photo record) {
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public int updateByPrimaryKeyWithoutBLOBs(Photo record) {
        int rows = getSqlMapClientTemplate().update("spreader_tb_photo.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    public SqlMapClientTemplate getSqlMapClientTemplate() {
        return sqlMap;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_photo
     *
     * @ibatorgenerated Thu Dec 15 11:45:43 CST 2011
     */
    private static class UpdateByExampleParms extends PhotoExample {

        private Object record;

        public UpdateByExampleParms(Object record, PhotoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}
