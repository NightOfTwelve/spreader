package com.nali.spreader.data;

import com.nali.common.model.Limit;
import com.nali.common.model.Shard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppPurchaseExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    private Shard shard;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    private Limit limit;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public AppPurchaseExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    protected AppPurchaseExample(AppPurchaseExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limit = example.limit;
        this.shard = example.shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public void setShard(Shard shard) {
        this.shard = shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public void setLimit(Limit limit) {
        this.limit = limit;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_app_purchase
     *
     * @ibatorgenerated Mon Apr 08 17:25:00 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andAppidIsNull() {
            addCriterion("appid is null");
            return this;
        }

        public Criteria andAppidIsNotNull() {
            addCriterion("appid is not null");
            return this;
        }

        public Criteria andAppidEqualTo(Long value) {
            addCriterion("appid =", value, "appid");
            return this;
        }

        public Criteria andAppidNotEqualTo(Long value) {
            addCriterion("appid <>", value, "appid");
            return this;
        }

        public Criteria andAppidGreaterThan(Long value) {
            addCriterion("appid >", value, "appid");
            return this;
        }

        public Criteria andAppidGreaterThanOrEqualTo(Long value) {
            addCriterion("appid >=", value, "appid");
            return this;
        }

        public Criteria andAppidLessThan(Long value) {
            addCriterion("appid <", value, "appid");
            return this;
        }

        public Criteria andAppidLessThanOrEqualTo(Long value) {
            addCriterion("appid <=", value, "appid");
            return this;
        }

        public Criteria andAppidIn(List<Long> values) {
            addCriterion("appid in", values, "appid");
            return this;
        }

        public Criteria andAppidNotIn(List<Long> values) {
            addCriterion("appid not in", values, "appid");
            return this;
        }

        public Criteria andAppidBetween(Long value1, Long value2) {
            addCriterion("appid between", value1, value2, "appid");
            return this;
        }

        public Criteria andAppidNotBetween(Long value1, Long value2) {
            addCriterion("appid not between", value1, value2, "appid");
            return this;
        }

        public Criteria andInfoTypeIsNull() {
            addCriterion("info_type is null");
            return this;
        }

        public Criteria andInfoTypeIsNotNull() {
            addCriterion("info_type is not null");
            return this;
        }

        public Criteria andInfoTypeEqualTo(Integer value) {
            addCriterion("info_type =", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeNotEqualTo(Integer value) {
            addCriterion("info_type <>", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeGreaterThan(Integer value) {
            addCriterion("info_type >", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("info_type >=", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeLessThan(Integer value) {
            addCriterion("info_type <", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeLessThanOrEqualTo(Integer value) {
            addCriterion("info_type <=", value, "infoType");
            return this;
        }

        public Criteria andInfoTypeIn(List<Integer> values) {
            addCriterion("info_type in", values, "infoType");
            return this;
        }

        public Criteria andInfoTypeNotIn(List<Integer> values) {
            addCriterion("info_type not in", values, "infoType");
            return this;
        }

        public Criteria andInfoTypeBetween(Integer value1, Integer value2) {
            addCriterion("info_type between", value1, value2, "infoType");
            return this;
        }

        public Criteria andInfoTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("info_type not between", value1, value2, "infoType");
            return this;
        }

        public Criteria andAssignCountIsNull() {
            addCriterion("assign_count is null");
            return this;
        }

        public Criteria andAssignCountIsNotNull() {
            addCriterion("assign_count is not null");
            return this;
        }

        public Criteria andAssignCountEqualTo(Integer value) {
            addCriterion("assign_count =", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountNotEqualTo(Integer value) {
            addCriterion("assign_count <>", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountGreaterThan(Integer value) {
            addCriterion("assign_count >", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("assign_count >=", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountLessThan(Integer value) {
            addCriterion("assign_count <", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountLessThanOrEqualTo(Integer value) {
            addCriterion("assign_count <=", value, "assignCount");
            return this;
        }

        public Criteria andAssignCountIn(List<Integer> values) {
            addCriterion("assign_count in", values, "assignCount");
            return this;
        }

        public Criteria andAssignCountNotIn(List<Integer> values) {
            addCriterion("assign_count not in", values, "assignCount");
            return this;
        }

        public Criteria andAssignCountBetween(Integer value1, Integer value2) {
            addCriterion("assign_count between", value1, value2, "assignCount");
            return this;
        }

        public Criteria andAssignCountNotBetween(Integer value1, Integer value2) {
            addCriterion("assign_count not between", value1, value2, "assignCount");
            return this;
        }

        public Criteria andConfirmCountIsNull() {
            addCriterion("confirm_count is null");
            return this;
        }

        public Criteria andConfirmCountIsNotNull() {
            addCriterion("confirm_count is not null");
            return this;
        }

        public Criteria andConfirmCountEqualTo(Integer value) {
            addCriterion("confirm_count =", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountNotEqualTo(Integer value) {
            addCriterion("confirm_count <>", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountGreaterThan(Integer value) {
            addCriterion("confirm_count >", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("confirm_count >=", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountLessThan(Integer value) {
            addCriterion("confirm_count <", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountLessThanOrEqualTo(Integer value) {
            addCriterion("confirm_count <=", value, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountIn(List<Integer> values) {
            addCriterion("confirm_count in", values, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountNotIn(List<Integer> values) {
            addCriterion("confirm_count not in", values, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountBetween(Integer value1, Integer value2) {
            addCriterion("confirm_count between", value1, value2, "confirmCount");
            return this;
        }

        public Criteria andConfirmCountNotBetween(Integer value1, Integer value2) {
            addCriterion("confirm_count not between", value1, value2, "confirmCount");
            return this;
        }
    }
}