package com.nali.spreader.data;

import com.nali.common.model.Limit;
import com.nali.common.model.Shard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HelpEnumInfoExample {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 16:04:32 CST 2012
     */
    public HelpEnumInfoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 16:04:32 CST 2012
     */
    protected HelpEnumInfoExample(HelpEnumInfoExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limit = example.limit;
        this.shard = example.shard;
    }

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    private Shard shard;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    private Limit limit;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public void setShard(Shard shard) {
        this.shard = shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public void setLimit(Limit limit) {
        this.limit = limit;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_help_enum_info
     *
     * @ibatorgenerated Thu Nov 15 17:57:35 CST 2012
     */
    public static class Criteria {

        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0 || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andEnumNameIsNull() {
            addCriterion("enum_name is null");
            return this;
        }

        public Criteria andEnumNameIsNotNull() {
            addCriterion("enum_name is not null");
            return this;
        }

        public Criteria andEnumNameEqualTo(String value) {
            addCriterion("enum_name =", value, "enumName");
            return this;
        }

        public Criteria andEnumNameNotEqualTo(String value) {
            addCriterion("enum_name <>", value, "enumName");
            return this;
        }

        public Criteria andEnumNameGreaterThan(String value) {
            addCriterion("enum_name >", value, "enumName");
            return this;
        }

        public Criteria andEnumNameGreaterThanOrEqualTo(String value) {
            addCriterion("enum_name >=", value, "enumName");
            return this;
        }

        public Criteria andEnumNameLessThan(String value) {
            addCriterion("enum_name <", value, "enumName");
            return this;
        }

        public Criteria andEnumNameLessThanOrEqualTo(String value) {
            addCriterion("enum_name <=", value, "enumName");
            return this;
        }

        public Criteria andEnumNameLike(String value) {
            addCriterion("enum_name like", value, "enumName");
            return this;
        }

        public Criteria andEnumNameNotLike(String value) {
            addCriterion("enum_name not like", value, "enumName");
            return this;
        }

        public Criteria andEnumNameIn(List<String> values) {
            addCriterion("enum_name in", values, "enumName");
            return this;
        }

        public Criteria andEnumNameNotIn(List<String> values) {
            addCriterion("enum_name not in", values, "enumName");
            return this;
        }

        public Criteria andEnumNameBetween(String value1, String value2) {
            addCriterion("enum_name between", value1, value2, "enumName");
            return this;
        }

        public Criteria andEnumNameNotBetween(String value1, String value2) {
            addCriterion("enum_name not between", value1, value2, "enumName");
            return this;
        }

        public Criteria andEnumValuesIsNull() {
            addCriterion("enum_values is null");
            return this;
        }

        public Criteria andEnumValuesIsNotNull() {
            addCriterion("enum_values is not null");
            return this;
        }

        public Criteria andEnumValuesEqualTo(String value) {
            addCriterion("enum_values =", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesNotEqualTo(String value) {
            addCriterion("enum_values <>", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesGreaterThan(String value) {
            addCriterion("enum_values >", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesGreaterThanOrEqualTo(String value) {
            addCriterion("enum_values >=", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesLessThan(String value) {
            addCriterion("enum_values <", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesLessThanOrEqualTo(String value) {
            addCriterion("enum_values <=", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesLike(String value) {
            addCriterion("enum_values like", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesNotLike(String value) {
            addCriterion("enum_values not like", value, "enumValues");
            return this;
        }

        public Criteria andEnumValuesIn(List<String> values) {
            addCriterion("enum_values in", values, "enumValues");
            return this;
        }

        public Criteria andEnumValuesNotIn(List<String> values) {
            addCriterion("enum_values not in", values, "enumValues");
            return this;
        }

        public Criteria andEnumValuesBetween(String value1, String value2) {
            addCriterion("enum_values between", value1, value2, "enumValues");
            return this;
        }

        public Criteria andEnumValuesNotBetween(String value1, String value2) {
            addCriterion("enum_values not between", value1, value2, "enumValues");
            return this;
        }

        public Criteria andSortIdIsNull() {
            addCriterion("sort_id is null");
            return this;
        }

        public Criteria andSortIdIsNotNull() {
            addCriterion("sort_id is not null");
            return this;
        }

        public Criteria andSortIdEqualTo(Integer value) {
            addCriterion("sort_id =", value, "sortId");
            return this;
        }

        public Criteria andSortIdNotEqualTo(Integer value) {
            addCriterion("sort_id <>", value, "sortId");
            return this;
        }

        public Criteria andSortIdGreaterThan(Integer value) {
            addCriterion("sort_id >", value, "sortId");
            return this;
        }

        public Criteria andSortIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("sort_id >=", value, "sortId");
            return this;
        }

        public Criteria andSortIdLessThan(Integer value) {
            addCriterion("sort_id <", value, "sortId");
            return this;
        }

        public Criteria andSortIdLessThanOrEqualTo(Integer value) {
            addCriterion("sort_id <=", value, "sortId");
            return this;
        }

        public Criteria andSortIdIn(List<Integer> values) {
            addCriterion("sort_id in", values, "sortId");
            return this;
        }

        public Criteria andSortIdNotIn(List<Integer> values) {
            addCriterion("sort_id not in", values, "sortId");
            return this;
        }

        public Criteria andSortIdBetween(Integer value1, Integer value2) {
            addCriterion("sort_id between", value1, value2, "sortId");
            return this;
        }

        public Criteria andSortIdNotBetween(Integer value1, Integer value2) {
            addCriterion("sort_id not between", value1, value2, "sortId");
            return this;
        }
    }
}
