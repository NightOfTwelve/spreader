package com.nali.spreader.model;

import com.nali.common.model.Limit;
import com.nali.common.model.Shard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhoneInfoExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    private Shard shard;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    private Limit limit;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public PhoneInfoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    protected PhoneInfoExample(PhoneInfoExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limit = example.limit;
        this.shard = example.shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public void setShard(Shard shard) {
        this.shard = shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public void setLimit(Limit limit) {
        this.limit = limit;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_phone_info
     *
     * @ibatorgenerated Fri Aug 23 16:52:22 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andPhoneNameIsNull() {
            addCriterion("phone_name is null");
            return this;
        }

        public Criteria andPhoneNameIsNotNull() {
            addCriterion("phone_name is not null");
            return this;
        }

        public Criteria andPhoneNameEqualTo(String value) {
            addCriterion("phone_name =", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameNotEqualTo(String value) {
            addCriterion("phone_name <>", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameGreaterThan(String value) {
            addCriterion("phone_name >", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameGreaterThanOrEqualTo(String value) {
            addCriterion("phone_name >=", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameLessThan(String value) {
            addCriterion("phone_name <", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameLessThanOrEqualTo(String value) {
            addCriterion("phone_name <=", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameLike(String value) {
            addCriterion("phone_name like", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameNotLike(String value) {
            addCriterion("phone_name not like", value, "phoneName");
            return this;
        }

        public Criteria andPhoneNameIn(List<String> values) {
            addCriterion("phone_name in", values, "phoneName");
            return this;
        }

        public Criteria andPhoneNameNotIn(List<String> values) {
            addCriterion("phone_name not in", values, "phoneName");
            return this;
        }

        public Criteria andPhoneNameBetween(String value1, String value2) {
            addCriterion("phone_name between", value1, value2, "phoneName");
            return this;
        }

        public Criteria andPhoneNameNotBetween(String value1, String value2) {
            addCriterion("phone_name not between", value1, value2, "phoneName");
            return this;
        }

        public Criteria andResolutionXIsNull() {
            addCriterion("resolution_x is null");
            return this;
        }

        public Criteria andResolutionXIsNotNull() {
            addCriterion("resolution_x is not null");
            return this;
        }

        public Criteria andResolutionXEqualTo(Integer value) {
            addCriterion("resolution_x =", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXNotEqualTo(Integer value) {
            addCriterion("resolution_x <>", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXGreaterThan(Integer value) {
            addCriterion("resolution_x >", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXGreaterThanOrEqualTo(Integer value) {
            addCriterion("resolution_x >=", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXLessThan(Integer value) {
            addCriterion("resolution_x <", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXLessThanOrEqualTo(Integer value) {
            addCriterion("resolution_x <=", value, "resolutionX");
            return this;
        }

        public Criteria andResolutionXIn(List<Integer> values) {
            addCriterion("resolution_x in", values, "resolutionX");
            return this;
        }

        public Criteria andResolutionXNotIn(List<Integer> values) {
            addCriterion("resolution_x not in", values, "resolutionX");
            return this;
        }

        public Criteria andResolutionXBetween(Integer value1, Integer value2) {
            addCriterion("resolution_x between", value1, value2, "resolutionX");
            return this;
        }

        public Criteria andResolutionXNotBetween(Integer value1, Integer value2) {
            addCriterion("resolution_x not between", value1, value2, "resolutionX");
            return this;
        }

        public Criteria andResolutionYIsNull() {
            addCriterion("resolution_y is null");
            return this;
        }

        public Criteria andResolutionYIsNotNull() {
            addCriterion("resolution_y is not null");
            return this;
        }

        public Criteria andResolutionYEqualTo(Integer value) {
            addCriterion("resolution_y =", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYNotEqualTo(Integer value) {
            addCriterion("resolution_y <>", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYGreaterThan(Integer value) {
            addCriterion("resolution_y >", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYGreaterThanOrEqualTo(Integer value) {
            addCriterion("resolution_y >=", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYLessThan(Integer value) {
            addCriterion("resolution_y <", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYLessThanOrEqualTo(Integer value) {
            addCriterion("resolution_y <=", value, "resolutionY");
            return this;
        }

        public Criteria andResolutionYIn(List<Integer> values) {
            addCriterion("resolution_y in", values, "resolutionY");
            return this;
        }

        public Criteria andResolutionYNotIn(List<Integer> values) {
            addCriterion("resolution_y not in", values, "resolutionY");
            return this;
        }

        public Criteria andResolutionYBetween(Integer value1, Integer value2) {
            addCriterion("resolution_y between", value1, value2, "resolutionY");
            return this;
        }

        public Criteria andResolutionYNotBetween(Integer value1, Integer value2) {
            addCriterion("resolution_y not between", value1, value2, "resolutionY");
            return this;
        }

        public Criteria andDpiIsNull() {
            addCriterion("dpi is null");
            return this;
        }

        public Criteria andDpiIsNotNull() {
            addCriterion("dpi is not null");
            return this;
        }

        public Criteria andDpiEqualTo(Integer value) {
            addCriterion("dpi =", value, "dpi");
            return this;
        }

        public Criteria andDpiNotEqualTo(Integer value) {
            addCriterion("dpi <>", value, "dpi");
            return this;
        }

        public Criteria andDpiGreaterThan(Integer value) {
            addCriterion("dpi >", value, "dpi");
            return this;
        }

        public Criteria andDpiGreaterThanOrEqualTo(Integer value) {
            addCriterion("dpi >=", value, "dpi");
            return this;
        }

        public Criteria andDpiLessThan(Integer value) {
            addCriterion("dpi <", value, "dpi");
            return this;
        }

        public Criteria andDpiLessThanOrEqualTo(Integer value) {
            addCriterion("dpi <=", value, "dpi");
            return this;
        }

        public Criteria andDpiIn(List<Integer> values) {
            addCriterion("dpi in", values, "dpi");
            return this;
        }

        public Criteria andDpiNotIn(List<Integer> values) {
            addCriterion("dpi not in", values, "dpi");
            return this;
        }

        public Criteria andDpiBetween(Integer value1, Integer value2) {
            addCriterion("dpi between", value1, value2, "dpi");
            return this;
        }

        public Criteria andDpiNotBetween(Integer value1, Integer value2) {
            addCriterion("dpi not between", value1, value2, "dpi");
            return this;
        }
    }
}