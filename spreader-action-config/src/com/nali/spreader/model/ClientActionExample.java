package com.nali.spreader.model;

import com.nali.common.model.Limit;
import com.nali.common.model.Shard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientActionExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    private Shard shard;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    private Limit limit;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public ClientActionExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    protected ClientActionExample(ClientActionExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limit = example.limit;
        this.shard = example.shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public void setShard(Shard shard) {
        this.shard = shard;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public void setLimit(Limit limit) {
        this.limit = limit;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table spreader.tb_client_action
     *
     * @ibatorgenerated Wed Jul 20 16:30:56 CST 2011
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andLogicTypeIsNull() {
            addCriterion("logic_type is null");
            return this;
        }

        public Criteria andLogicTypeIsNotNull() {
            addCriterion("logic_type is not null");
            return this;
        }

        public Criteria andLogicTypeEqualTo(Integer value) {
            addCriterion("logic_type =", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeNotEqualTo(Integer value) {
            addCriterion("logic_type <>", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeGreaterThan(Integer value) {
            addCriterion("logic_type >", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("logic_type >=", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeLessThan(Integer value) {
            addCriterion("logic_type <", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeLessThanOrEqualTo(Integer value) {
            addCriterion("logic_type <=", value, "logicType");
            return this;
        }

        public Criteria andLogicTypeIn(List<Integer> values) {
            addCriterion("logic_type in", values, "logicType");
            return this;
        }

        public Criteria andLogicTypeNotIn(List<Integer> values) {
            addCriterion("logic_type not in", values, "logicType");
            return this;
        }

        public Criteria andLogicTypeBetween(Integer value1, Integer value2) {
            addCriterion("logic_type between", value1, value2, "logicType");
            return this;
        }

        public Criteria andLogicTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("logic_type not between", value1, value2, "logicType");
            return this;
        }

        public Criteria andCoolDownSecondsIsNull() {
            addCriterion("cool_down_seconds is null");
            return this;
        }

        public Criteria andCoolDownSecondsIsNotNull() {
            addCriterion("cool_down_seconds is not null");
            return this;
        }

        public Criteria andCoolDownSecondsEqualTo(Long value) {
            addCriterion("cool_down_seconds =", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsNotEqualTo(Long value) {
            addCriterion("cool_down_seconds <>", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsGreaterThan(Long value) {
            addCriterion("cool_down_seconds >", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsGreaterThanOrEqualTo(Long value) {
            addCriterion("cool_down_seconds >=", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsLessThan(Long value) {
            addCriterion("cool_down_seconds <", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsLessThanOrEqualTo(Long value) {
            addCriterion("cool_down_seconds <=", value, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsIn(List<Long> values) {
            addCriterion("cool_down_seconds in", values, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsNotIn(List<Long> values) {
            addCriterion("cool_down_seconds not in", values, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsBetween(Long value1, Long value2) {
            addCriterion("cool_down_seconds between", value1, value2, "coolDownSeconds");
            return this;
        }

        public Criteria andCoolDownSecondsNotBetween(Long value1, Long value2) {
            addCriterion("cool_down_seconds not between", value1, value2, "coolDownSeconds");
            return this;
        }
    }
}